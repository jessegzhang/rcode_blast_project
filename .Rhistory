count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char==":")
{
numCheck<-TRUE
}
if(char==","||char==")"||char=="(")
{
numCheck<-FALSE
}
if(numCheck==TRUE)
{
test_split <- test_split[-count]
}
else
{
count<-count+1
}
}
#used to remove extra numbers from t he original pattern recognizer, may be combined in the future if possible
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char!="0"&&char!="1"&&char!="2"&&char!="3"&&char!="4"&&char!="5"&&char!="6"&&char!="7"&&char!="8"&&char!="9")
{
numCheck<-FALSE
}
if(char==")")
{
numCheck<-TRUE
}
if(count>length(test_split))
{
break
}
if(numCheck==TRUE&&test_split[count]!=","&&test_split[count]!=")")
{
test_split<-test_split[-count]
}
else
{
count<-count+1
}
}
test<-"((ABE,BOG),((COD,DON),EGO))"
#test<-"((A,B),((C,D),E))"
#test<-"(((A,B),(C,D)),(E,F))"
#test<-"((A,B),C,D)"
#test<-"((A,B),(C,D),E)"
#test<-"((A,B),(C,D),(E,F))"
#test<-"(((A,B),(C,D)),(E,F),(G,H))"
#test<-"(A,(D,C))"
#test<-"((H_1,C),(H_2,G))"
uniquevarID<-0
tempVar<-"tempVar"
#phase out unecessary data in the newick notation
test_split<- strsplit(test,"")[[1]]
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char==":")
{
numCheck<-TRUE
}
if(char==","||char==")"||char=="(")
{
numCheck<-FALSE
}
if(numCheck==TRUE)
{
test_split <- test_split[-count]
}
else
{
count<-count+1
}
}
#used to remove extra numbers from t he original pattern recognizer, may be combined in the future if possible
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char!="0"&&char!="1"&&char!="2"&&char!="3"&&char!="4"&&char!="5"&&char!="6"&&char!="7"&&char!="8"&&char!="9")
{
numCheck<-FALSE
}
if(char==")")
{
numCheck<-TRUE
}
if(count>length(test_split))
{
break
}
if(numCheck==TRUE&&test_split[count]!=","&&test_split[count]!=")")
{
test_split<-test_split[-count]
}
else
{
count<-count+1
}
}
simplified<-paste(test_split, collapse="")
myVars<-strsplit((gsub("[()]","",simplified)),"[,]")[[1]]
#initalizing list to store variables
#TODO: Preallocate size of list
matrixList <- vector(mode="list",length=length(myVars))
count<-1
for (vars in myVars)
{
matrixList[[count]]<- list(var=vars, value=0, varMatrix=matrix(0,nrow=length(myVars),ncol=1))
rownames(matrixList[[count]]$varMatrix)<-myVars
count<-count+1
}
#splits the newick notation into variables
full_split<-gsub("[A-Z0-9_]"," ",simplified)
full_split<-gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", full_split, perl=TRUE)
full_split <- strsplit(full_split, "")[[1]]
#establishes variables
test<-"((H_1,C),(H_2,G))"
uniquevarID<-0
tempVar<-"tempVar"
#phase out unecessary data in the newick notation
test_split<- strsplit(test,"")[[1]]
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char==":")
{
numCheck<-TRUE
}
if(char==","||char==")"||char=="(")
{
numCheck<-FALSE
}
if(numCheck==TRUE)
{
test_split <- test_split[-count]
}
else
{
count<-count+1
}
}
#used to remove extra numbers from t he original pattern recognizer, may be combined in the future if possible
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char!="0"&&char!="1"&&char!="2"&&char!="3"&&char!="4"&&char!="5"&&char!="6"&&char!="7"&&char!="8"&&char!="9")
{
numCheck<-FALSE
}
if(char==")")
{
numCheck<-TRUE
}
if(count>length(test_split))
{
break
}
if(numCheck==TRUE&&test_split[count]!=","&&test_split[count]!=")")
{
test_split<-test_split[-count]
}
else
{
count<-count+1
}
}
simplified<-paste(test_split, collapse="")
myVars<-strsplit((gsub("[()]","",simplified)),"[,]")[[1]]
#initalizing list to store variables
#TODO: Preallocate size of list
matrixList <- vector(mode="list",length=length(myVars))
count<-1
for (vars in myVars)
{
matrixList[[count]]<- list(var=vars, value=0, varMatrix=matrix(0,nrow=length(myVars),ncol=1))
rownames(matrixList[[count]]$varMatrix)<-myVars
count<-count+1
}
#splits the newick notation into variables
full_split<-gsub("[A-Z0-9]"," ",simplified)
full_split<-gsub("_"," ",full_split)
full_split<-gsub("(?<=[\\s])\\s*|^\\s+|\\s+$", "", full_split, perl=TRUE)
full_split <- strsplit(full_split, "")[[1]]
source('D:/GitHub/rcode_blast_project/njst.R')
View(finalMatrix)
View(finalMatrix)
do stuff
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
{
source('D:/GitHub/rcode_blast_project/fileparser.R')
}
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
con  <- file(inputFile, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0)
{
#dostuff
}
close(con)
con  <- file(file.choose(), open = "r")
View(inputFile)
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
oneLine<-readLines(con, n=1, warn=FALSE))
oneLine <- readLines(con, n = 1, warn = FALSE)
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
alternateScheme=FALSE
test<-"((H_1,C),(H_2,G))"
uniquevarID<-0
tempVar<-"tempVar"
#phase out unecessary data in the newick notation
test_split<- strsplit(test,"")[[1]]
count<-1
numCheck<-FALSE
for (char in test_split)
{
if(char==":")
{
numCheck<-TRUE
}
if(char==","||char==")"||char=="(")
{
numCheck<-FALSE
}
if(numCheck==TRUE)
{
test_split <- test_split[-count]
}
else
{
count<-count+1
}
}
print(oneLine)
source('D:/GitHub/rcode_blast_project/fileparser.R')
trueFalse[[2]]
test_split[[2]]
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
print(colnames(i$matrix))
for(i in matrixReductionList)
{
for(j in colnames(i$matrix))
{
print(j)
}
}
taxaList <- sapply(keyList,"[[","varList")
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(i in j:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key)
}
keyList[[i]]$length
keyList[[1]]$length
keyList[[1]]$length
keyList[[2]]$length
keyList[[3]]$length
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(i in j:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key)
}
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(j in 1:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key)
}
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(j in 1:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key, varList=tempVarListKey)
}
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(j in 1:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key, varList=tempVarListKey)
}
keyList<-tempKeyList
tempKeyList<-vector(mode="list",length=keyLength)
for(i in 1:keyLength)
{
tempVarListKey<-vector(mode="list", length=keyList[[i]]$length)
for(j in 1:keyList[[i]]$length)
{
tempVarListKey[[j]]<-keyList[[i]]$varList[[j]]
}
tempKeyList[[i]]<-list(key=keyList[[i]]$key, varList=tempVarListKey)
}
keyList<-tempKeyList
#print out for user confirmation
#whether or not they like that list
for(i in 1:keyLength)
source('D:/GitHub/rcode_blast_project/fileparser.R')
source('D:/GitHub/rcode_blast_project/fileparser.R')
keyMatch<-match("BOG", taxaList)
keyMatch<-match("CAB", taxaList)
taxaList[[1]]
keyCount<-1
i$matrixKeyList[[keyCount]]
matrixCount<-1
i$matrixKeyList[[keyCount]][[1, matrixCount]]
i$matrixKeyList[[keyCount]][[matrixCount, 1]]
i$matrixKeyList[[keyCount]][[1, 1]]
i$matrixKeyList[[keyCount]][1, 1]
matrixTest<-i$matrixKeyList[[keyCount]]
matrixTest[1,1]
matrixTest
matrixTest[[1,1]]
matrixTest[1,]
matrixTest[0,]
matrixTest
matrixTest<-i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]
matrixTest
source('D:/GitHub/rcode_blast_project/fileparser.R')
#calculation of the matrix here
for(i in matrixReductionList)
{
matrixCount<-1
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, taxaList)
if(!is.na(keyMatch))
{
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
for(i in matrixReductionList)
{
matrixCount<-1
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, taxaList)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
for(i in matrixReductionList)
{
matrixCount<-1
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, taxaList)
print(keyMatch)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
taxaList
k
for(i in matrixReductionList)
matrixCount<-1
{
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
print(k)
keyMatch<-match(j, taxaList)
#print(keyMatch)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
for(i in matrixReductionList)
{
matrixCount<-1
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, k)
print(keyMatch)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
for(i in matrixReductionList)
{
matrixCount<-1
for(j in colnames(i$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, k)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
print(i$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount])
matrixCount<-matrixCount+1
}
}
#calculation of the matrix here
for(i in 1:length(matrixReductionList))
{
matrixCount<-1
for(j in colnames(matrixReductionList[[i]]$matrix))
{
taxaList <- sapply(keyList,"[[","varList")
keyCount<-1
for(k in taxaList)
{
keyMatch<-match(j, k)
if(!is.na(keyMatch))
{
print("something found breaking!")
break
}
keyCount<-keyCount+1
}
matrixReductionList[[i]]$matrixKeyList[[keyCount]]$associatedMatrix[1,matrixCount]<-1
matrixCount<-matrixCount+1
}
}
source('D:/GitHub/rcode_blast_project/fileparser.R')
